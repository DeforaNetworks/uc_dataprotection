<?php
// $Id$

/**
 * Ubercart Terms of Service.
 */

/**
 * Implementation of hook_menu().
 */
function uc_termsofservice_menu() {
  $items = array();

  $items['uc_termsofservice/node/autocomplete'] = array(
    'title'             => 'Autocomplete of nodes',
    'page callback'     => 'uc_termsofservice_node_autocomplete',
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
  );

  /**
   * modalframe callback items
   */
  if (module_exists('modalframe')) {
    $items['uc_termsofservice/show'] = array(
      'title'             => 'Show Terms of Service',
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('uc_termsofservice_general_form'),
      'access callback'   => TRUE,
      'type'              => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function uc_termsofservice_theme() {
  return array(
    'uc_termsofservice_agreement_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'uc_termsofservice_agreement_form',
    ),
    'uc_termsofservice_agreement_node' => array(
      'arguments' => array('node' => NULL),
      'template' => 'uc_termsofservice_agreement_node',
    ),
  );
}

/**
 * Ubercart hooks
 */

/**
 * Implementation of hook_cart_pane().
 */
function uc_termsofservice_cart_pane($items) {
  $panes[] = array(
    'id' => 'uc_termsofservice_agreement_cart',
    'title' => t('Terms and conditions agreement'),
    'desc' => t("Please confirm if you agree with our terms and conditions that apply on all our purchases."),
    'weight' => 6,
    'body' => !is_null($items) ? drupal_get_form('uc_termsofservice_agreement_cart_callback', $items) : '',
  );
  return $panes;
}

/**
 * Implementation of hook_checkout_pane().
 */
function uc_termsofservice_checkout_pane() {
  $panes[] = array(
    'id' => 'uc_termsofservice_agreement_checkout',
    'callback' => 'uc_termsofservice_checkout_pane_callback',
    'title' => t('Terms and conditions agreement'),
    'desc' => t("Please confirm if you agree with our terms and conditions that apply on all our purchases."),
    'weight' => 6,
    'collapsible' => TRUE,
  );
  return $panes;
}

/**
 * Callback form for cart pane.
 */
function uc_termsofservice_agreement_cart_callback($items) {
  if (module_exists('modalframe') && variable_get('uc_termsofservice_cart_popup', 0)) {
    // If the modalframe module is enabled and the config for popups is
     // then the ToS is shown in a popup
    modalframe_parent_js();
    drupal_add_js(drupal_get_path('module', 'uc_termsofservice') .'/uc_termsofservice.js');
    $node = uc_termsofservice_get_node('cart');
    $form = uc_termsofservice_get_item('cart', $node->title, 'uc_termsofservice/show', '500,300');
  }
  else {
    $form = uc_termsofservice_general_form(array(), 'cart');
  }
  return $form;
}

/**
 * General form for both checkout & cart modes
 */
function uc_termsofservice_general_form($form_state, $type = NULL) {
  $form = array();
  if (!$type) {
    $type = arg(2);
  }
  $node = uc_termsofservice_get_node($type);
  if ($node) {
    $required = variable_get('uc_termsofservice_'. $type .'_required', 0);
    $form['tos_text'] = array(
      '#value' => theme('uc_termsofservice_agreement_node', $node),
    );
    $form['tos_agree'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Terms of Service'),
      '#options' => array('agreed' => t('I agree with the Terms of Service')),
      '#required' => $required,
    );
    $form['#theme'] = 'uc_termsofservice_agreement_form';

    if (module_exists('modalframe') && variable_get('uc_termsofservice_'. $type .'_popup', 0)) {
      // Send the Modal Frame javascript for child windows to the page.
      modalframe_child_js();
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
      );
      $form['tos_agree']['#attributes'] = array('onclick' => 'this.form.submit();');
    }
    return $form;
  }
  return;
}

function uc_termsofservice_general_form_submit($form, &$form_state) {
  modalframe_close_dialog(array('tos_selected' => $form_state['values']['tos_agree']));
}

/**
 * Callback form for checkout pane.
 */
function uc_termsofservice_checkout_pane_callback($op) {
  switch ($op) {
    case 'view':
      if (module_exists('modalframe') && variable_get('uc_termsofservice_checkout_popup', 0)) {
        // If the modalframe module is enabled and the config for popups is
         // then the ToS is shown in a popup
        modalframe_parent_js();
        drupal_add_js(drupal_get_path('module', 'uc_termsofservice') .'/uc_termsofservice.js');
        $node = uc_termsofservice_get_node('checkout');
        $form = uc_termsofservice_get_item('checkout', $node->title, 'uc_termsofservice/show', '500,300');
      }
      else {
        $form = uc_termsofservice_general_form(array(), 'checkout');
      }
      return array('contents' => $form, 'next-button' => FALSE);
      break;
    case 'settings':
      $form = uc_termsofservice_admin_form('checkout');
      return $form;
      break;
  }
}

/**
 * Function that filters the node nid from the autocomplete string.
 */
function uc_termsofservice_get_nid_from_variable($type = NULL) {
  $tos_node = variable_get('uc_termsofservice_'. $type .'_node', 0);
  $preg_matches = array();
  $match = preg_match('/\[nid: (\d+)\]/', $tos_node, $preg_matches);
  if ($match) {
    $nid = $preg_matches[1];
  }
  return $nid;
}

/**
 * Retrieves the ToS node from database.
 */
function uc_termsofservice_get_node($type = NULL, $nid = NULL) {
  if (!$nid) {
    $nid = uc_termsofservice_get_nid_from_variable($type);
  }
  if ($nid) {
    if (module_exists('translation')) {
      global $language;
      $translations = translation_node_get_translations($nid);
      if ($translations[$language->language]) {
        $nid = $translations[$language->language]->nid;
      }
    }
    $node = node_load($nid);
    return $node;
  }
  return;
}

/**
 * Helper function for ModalFrame to build links to popup page.
 */
function uc_termsofservice_get_item($type = NULL, $title, $path, $size = NULL) {
  $options = array('attributes' => array('class' => 'uc_termsofservice-child'. (!empty($size) ? ' uc_termsofservice-size['. $size .']' : '')));
  $required = variable_get('uc_termsofservice_'. $type .'_required', 0);
  $form['tos_agree_popup'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Terms of Service'),
    '#options' => array('agreed' => t('I agree with the !tos', array('!tos' => l($title, $path .'/'. $type, $options)))),
    '#required' => $required,
  );
  return $form;
}

/**
 * Settings form for checkout & cart panes.
 */
function uc_termsofservice_admin_form($type = NULL) {
  if ($type) {
    $form = array();

    // Not required option for checkout pane at the moment
    if ($type == 'checkout') {
      $form['uc_termsofservice_'. $type .'_required'] = array(
        '#type' => 'checkbox',
        '#title' => t('ToS agreement is required'),
        '#default_value' => variable_get('uc_termsofservice_'. $type .'_required', 0),
        '#weight' => -2,
      );
    }

    $form['uc_termsofservice_'. $type .'_node'] = array(
      '#type' => 'textfield',
      '#title' => t('Select the node that corresponds to the Terms of Service'),
      '#autocomplete_path' => 'uc_termsofservice/node/autocomplete',
      '#default_value' => variable_get('uc_termsofservice_'. $type .'_node', NULL),
      '#weight' => 0,
    );

    if (module_exists('modalframe')) {
      $form['uc_termsofservice_'. $type .'_popup'] = array(
        '#type' => 'checkbox',
        '#title' => t('Open ToS in a popup modal window.'),
        '#default_value' => variable_get('uc_termsofservice_'. $type .'_popup', 0),
        '#weight' => -1,
      );
    }
    return $form;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function uc_termsofservice_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'uc_cart_cart_panes_form') {
    $form['uc_termsofservice'] = array(
      '#type' => 'fieldset',
      '#title' => t('Terms of Service settings'),
      '#weight' => 98,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['uc_termsofservice'] += uc_termsofservice_admin_form('cart');
    $form['buttons']['#weight'] = 99;
  }
}

/**
 * Autocomplete callback, taken from panels module
 */
function uc_termsofservice_node_autocomplete($string) {
  if ($string != '') { // if there are node_types passed, we'll use those in a MySQL IN query.
    $preg_matches = array();
    $match = preg_match('/\[nid: (\d+)\]/', $string, $preg_matches);
    if (!$match) {
      $match = preg_match('/^nid: (\d+)/', $string, $preg_matches);
    }
    if ($match) {
      $arg = $preg_matches[1];
      $where = "n.nid = %d";
    }
    else {
      $arg = $string;
      $where = "LOWER(title) LIKE LOWER('%%%s%%')";
    }
    $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, u.name FROM {node} n INNER JOIN {users} u ON u.uid = n.uid WHERE $where"), $arg, 0, 10);

    $matches = array();
    while ($node = db_fetch_object($result)) {
      $name = empty($node->name) ? variable_get('anonymous', t('Anonymous')) : check_plain($node->name);
      $matches[$node->title . " [nid: $node->nid]"] = '<span class="autocomplete_title">'. check_plain($node->title) .'</span> <span class="autocomplete_user">('. t('by @user', array('@user' => $name)) .')</span>';
    }
    drupal_json($matches);
  }
}